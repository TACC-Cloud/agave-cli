#!/bin/bash
#
# files-pems-list
#
# author: opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# It provides a mechanism for setting user permissions on a file or folder.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey username permission)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

Edit user permissions on a file or folder. For all but iRODS systems, these
permissions are set at the API level and do not reflect *nix or other file
system ACL. On iRODS systems, if the system.storageConfig.mirror attribute
is set to true then any permissions set via the API will be mirrored onto
the remote system.

Also remember that no permissions can be set on public files and folders.

 Options:
  -z, --access_token    Access token
  -U, --pemusername     *deprecated* Same as -u
  -u, --pemusername     The user whose permissions should be listed
  -P, --permission      *deprecated* Same as -p
  -p, --permission      The permission to set. Valid values are READ,
                        WRITE, EXECUTE, READ_WRITE, READ_EXECUTE,
                        WRITE_EXECUTE, ALL, and NONE
  -R, --recursive       Recursively apply permissions to folder contents
  -S, --systemId        Specify the system id
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x

	if [ -z "$args" ]; then
		err "Please specify a valid file path for which to retrieve permissions"
	else

		if [ -n "$systemId" ]; then
			hosturl="${hosturl}pems/system/${systemId}/"
		else
			hosturl="${hosturl}pems/"
		fi

    if ((recursive)); then
      recursive="true";
    else
      recursive="false";
    fi

		cmd="curl -sk -H \"${authheader}\" -X POST -d \"username=${pemusername}&permission=${permission}&recursive=${recursive}\" '${hosturl}${args}?pretty=true'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sk -H "${authheader}" -X POST -d "username=${pemusername}&permission=${permission}&recursive=${recursive}" "${hosturl}${args}?pretty=true"`

		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "$result"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi

}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		echo "Successfully updated permission for $pemusername"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -u|-U|--pemusername) shift; pemusername=$1 ;;
    -p|-P|--permission) shift; permission=$1 ;;
    -R|--recursive) recursive=1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
