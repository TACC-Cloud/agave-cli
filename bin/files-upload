#!/bin/bash
#
# files-upload
#
# author: opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# Upload a file and apply trivial metadata
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey filetoupload)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

Uploads a local file or folder to a remote storage system. The upload will occur
via HTTPS. The subsequent staging will be done via the native data protocol for
the destination system. If the given file type requires import filtering, it will
be applied prior to the callback being sent. If no system id is specified, the
user's default storage system will be used.

 Options:
  -z, --access_token    Access token
  -F, --filetoupload    The file or folder to upload. Use - to read from STDIN
                        and when piping
  -C, --callbackurl     The email address or webhook to notify upon completion
                        of all import filtering
  -T, --filetype        The filetype associated with this file. See transforms-list
                        for a full list of supported file types. Defaults to 'raw'
  -N, --filename        The name of the file once uploaded
  -S, --systemid        The system to which the file or folder will be uploaded
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x

	local post_options='';

		if [[ ! -e "$filetoupload" ]] && [[ "$filetoupload" != "-" ]]; then

		response="Local file $filetoupload does not exist"
		err "$response"

	else
		baseurl=${hosturl}
		if [ -n "$callbackurl" ]; then
			post_options="notifications=${callbackurl}"
		fi

		if [ -n "$filetype" ]; then
			post_options="fileType=${filetype}&${post_options}"
		fi

		if [ -n "$systemid" ]; then
			hosturl="${hosturl}media/system/${systemid}/"
		else
			hosturl="${hosturl}media/"
		fi

		if [ -n "$filename" ]; then
			post_options="fileName=${filename}&${post_options}"
		fi


		quietarg="-#"
		if ((quiet)); then
			quietarg="-s"
		fi

		# If the filetoupload is a file, then just copy it up.
	  	if [ -f "$filetoupload" ]; then

			((!piped)) && out "Uploading ${filetoupload}..."

			#recursively copy the folder applying filename to the root

		  	if [ -n "$post_options" ]; then

				post_options=${post_options%&}

				cmd="curl $quietarg -k -H \"${authheader}\" -X POST -F \"fileToUpload=@$filetoupload\" -F \"${post_options}\" '$hosturl$args?pretty=true'"

				if ((veryverbose)); then
					[ "$piped" -eq 0 ] && log "Calling $cmd"
				fi
				#response='{"status":"success","response":{},"message":null}'
				response=`curl $quietarg -k -H "${authheader}" -X POST -F "fileToUpload=@$filetoupload" -F "${post_options}" "$hosturl$args?pretty=true"`

			else

				cmd="curl $quietarg -k -H \"${authheader}\" -X POST -F \"fileToUpload=@$filetoupload\" '$hosturl$args?pretty=true'"

				if ((veryverbose)); then
					[ "$piped" -eq 0 ] && log "Calling $cmd"
				fi
				#response='{"status":"success","response":{},"message":null}'
				response=`curl $quietarg -k -H "${authheader}" -X POST -F "fileToUpload=@$filetoupload" "$hosturl$args?pretty=true"`

			fi
		# if the file is coming from stdin, verify we have a filename and feed it to curl
		elif [[ "$filetoupload" == "-" ]]; then

			if [[ -z "$filename" ]]; then

				response="Please provide a filename for the piped file"
				err "$response"

			else

				if [ -n "$post_options" ]; then

				  post_options=${post_options%&}

				  cmd="curl $quietarg -k -H \"${authheader}\" -X POST -F \"fileToUpload=@-\" -F \"${post_options}\" '$hosturl$args?pretty=true'"

				  if ((veryverbose)); then
					[ "$piped" -eq 0 ] && log "Calling $cmd"
				  fi
				  #response='{"status":"success","response":{},"message":null}'
				  response=`curl $quietarg -k -H "${authheader}" -X POST -F "fileToUpload=@-" -F "${post_options}" "$hosturl$args?pretty=true"`

				else

				  cmd="curl $quietarg -k -H \"${authheader}\" -X POST -F \"fileToUpload=@-\" '$hosturl$args?pretty=true'"

				  if ((veryverbose)); then
					[ "$piped" -eq 0 ] && log "Calling $cmd"
				  fi
				  #response='{"status":"success","response":{},"message":null}'
				  response=`curl $quietarg -k -H "${authheader}" -X POST -F "fileToUpload=@-" "$hosturl$args?pretty=true"`

				fi

			fi

		# if it is a directory, then create the remote directory, using the $filename value
		# or the basename of the $filetoupload, then recursively uploading the contents
		else

			filetoupload=${filetoupload%/}
			cliargs=''

			if ((development)); then
				cliargs="${cliargs} -d"
			fi

			if ((veryverbose)); then
				cliargs="${cliargs} -V"
			fi

			if ((verbose)); then
				cliargs="${cliargs} -v"
			fi

			if ((quiet)); then
				cliargs="${cliargs} -q"
			fi

			if [ -n "$systemid" ]; then
				cliargs="${cliargs} -S ${systemid}"
			fi

			if [ -d "$filename" ]; then
				newdirname="$filename"
			else
				newdirname=`basename ${filetoupload}`
			fi

			if [[ -d "$args" ]]; then
				args=${args%/}
			fi
			newdirpath="${args}/${newdirname}"

			out "Creating directory $newdirpath ..."
			log "Calling $DIR/files-mkdir ${cliargs} -N ${newdirname} $args"
			# create the remote directory to which everything will be copied
			mkdir_response=$($DIR/files-mkdir ${cliargs} -N ${newdirname} $args 1>/dev/null 2>&1)

			if [ ! $? ]; then
				err "Failed to create remote directory ${args}/${newdirname}"
				exit
			fi

			# recursively copy
			for i in `ls $filetoupload`; do

				if [ "$i" = "." ] || [ "$i" = ".." ]; then
					continue;
				else

					childfiletoupload="$filetoupload/$i"

					# call out to the mkdirs command
					#echo "Calling $DIR/files-upload $cliargs -F ${childfiletoupload} $newdirpath"
					upload_response=$($DIR/files-upload $cliargs -F ${childfiletoupload} $newdirpath 3>&1 1>&2 2>&3 | tee /dev/stderr)
					if [ ! $? ]; then
						err "$upload_response"
					fi
				fi
			done

			if [ -n "$systemid" ]; then
				hosturl="${baseurl}listings/system/${systemid}/${newdirpath}"
			else
				hosturl="${baseurl}listings/${newdirpath}"
			fi
			#echo "Calling curl -sk -H ${authheader} \"${hosturl%/}?pretty=true\""
			response=`curl -sk -H "${authheader}"  "${hosturl%/}?pretty=true"`
		fi

		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			if [ -n "$result" ]; then
				   success "${result}"
			fi
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi
}

format_api_json() {

	if ((veryverbose)); then
		out "$1"
	elif [[ $verbose -eq 1 ]]; then
		jsonquery "$response" "result"
#		#out "${result}" | python -mjson.tool
#		json_prettyify out "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -F|--filetoupload) shift; filetoupload=$1 ;;
    -C|--callbackurl) shift; callbackurl=$1 ;;
    -T|--filetype) shift; filetype=$1 ;;
    -N|--filename) shift; filename=$1 ;;
    -S|--systemid) shift; systemid=$1 ;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
