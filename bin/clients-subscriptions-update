#!/bin/bash
#
# clients-subscriptions-update
#
# author: opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# It subscribes the client to one or all APIs.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"
interactive=1

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apiusername apipassword apiName)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [CLIENT_NAME]

Subscribe a client to one or all apis.

 Options:
  -u, --apiusername    API username
  -p, --apipassword    API password
  -N, --apiName        The name of the API to subscribe the client application to.
                       Use a wildcard to subscribe to all APIs
  -T, --tier           The subscription tier
  -R, --apiVersion     The version of the API to subscribe the client application to
  -P, --apiProvider    The user who registered the API
  -H, --hosturl        URL of the service
  -d, --development    Run in dev mode using default dev server
  -f, --force          Skip all user interaction
  -i, --interactive    Prompt for values
  -q, --quiet          Quiet (no output)
  -v, --verbose        Verbose output
  -V, --veryverbose    Very verbose output
  -h, --help           Display this help and exit
      --version        Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/clients-common.sh"

main() {
	#echo -n
	#set -x

	if [ -z "$args" ]; then
		err "Please specify a valid client name"
	else

		if [ -z "$apiName" ]; then
			err "Please specify an API name or * for all APIs"
		fi

		if [ -z "$tier" ]; then
			tier='Unlimited'
		fi

		cmd="curl -sku \"${apiusername}:xxxx\" -X POST -d \"apiName=${apiName}&tier=${tier}&apiVersion=${apiVersion}&apiProvider=${apiProvider}\" '${hosturl}${args}/subscriptions?pretty=true'"

		if ((veryverbose)); then
			[ "$piped" -eq 0 ] && log "Calling $cmd"
		fi

		response=`curl -sku "${apiusername}:${apipassword}" -X POST -d "apiName=${apiName}&tier=${tier}&apiVersion=${apiVersion}&apiProvider=${apiProvider}" "${hosturl}${args}/subscriptions?pretty=true"`

		if [[ $(jsonquery "$response" "status") = 'success' ]]; then
			result=$(format_api_json "$response")
			success "${result}"
		else
			errorresponse=$(jsonquery "$response" "message")
			err "$errorresponse"
		fi
	fi
}

format_api_json() {

	if ((veryverbose)); then
		json_prettyify "${1}"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		result=$(jsonquery "$1" "result.[].apiName")
		echo "${result}"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -u|--apiusername) shift; apiusername=$1 ;;
    -p|--apipassword) shift; apipassword=$1 ;;
    -N|--apiName) shift; apiName=$1 ;;
  	-T|--tier) shift; tier=$1 ;;
  	-P|--apiProvider) shift; apiProvider=$1 ;;
  	-R|--apiVersion) shift; apiVersion=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
