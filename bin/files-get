#!/bin/bash
#
# files-get
#
# author: jfonner@tacc.utexas.edu, opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# It downloads a file listing from a remote system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

Downloads a remote file. Regardless of the remote protocol used to access the
system, the file will be downloaded over HTTP. Keep this in mind for larger
files. If no system is specified, your default storage system will be used.
By specifying a system, the path given will be resolved on that remote system.
Note that the system id, not hostname must be given.

 Options:
  -z, --access_token    Access token
  -S, --systemId        Specify the system id
  -R, --range           Byte range to retrieve in <start>-<end> format
  -N, --filename        Name by which the local file should be saved
  -r, --recursive       Copy files and directories recursively
  -P, --print           Print contents to stdout
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
    # Exit early if $args (filename) are not set.
	if [  -z "$args" ]; then
		err "Please specify a valid file path to download. Directory downloads are not yet supported."
        exit 
    fi

    # Set filesurl variable.
	if [ -n "$systemId" ]; then
		filesurl="${hosturl}media/system/${systemId}/${args}"
	else
		filesurl="${hosturl}media/${args}"
	fi

    # Variable outputarg will dictate where the API's response is redirected
    # to.
	if (($print)); then
        if ((recursive)); then
            err "Printing to standard out cannot be specified with recursive downloads"
            exit
        else
            outputarg=" "
        fi

	elif [ -n "$filename" ]; then
		outputarg="-o $filename"
	else
		outputarg="-O"
	fi

    # filerange specifies a range (bytes) of data to download.
	if [ -n "$range" ]; then
        if ((recursive)); then
            err "Range queries cannot be specified with recursive downloads"
            exit
        else
            filerange="-r ${range} "
        fi
	else
		filerange=""
	fi
        

    # Directory downloads.
    if ((recursive)); then
            
        if ((veryverbose)); then
            out "Retrieving remote directory listing..."
        fi

        # Set filelistings url.
        if [ -n "$systemId" ]; then
            fileslistingurl="${hosturl}listings/system/${systemId}/${args}"
        else
            fileslistingurl="${hosturl}listings/${args}"
        fi
    
        # List the contents of the system.
        response=`curl -sk -H "${authheader}" "${fileslistingurl%/}"`

        if [[ $(jsonquery "$response" "status") = 'success' ]]; then
            if ((development)); then
                fgrparams=" -d "
            fi

            if ((veryverbose)); then
                fgrparams="$fgrparams -V "
            elif ((verbose)); then
                fgrparams="$fgrparams -v "
            fi
            
            read -d '' -a names <<< $(jsonquery "$response" "result.[].name")
            read -d '' -a types <<< $(jsonquery "$response" "result.[].type")
            read -d '' -a formats <<< $(jsonquery "$response" "result.[].format")
            read -d '' -a paths <<< $(jsonquery "$response" "result.[].path")
            read -d '' -a lengths <<< $(jsonquery "$response" "result.[].length")
            
            # make sure we have the systemID
            if [ -z "$systemId" ]; then
                systems=($(jsonquery "$response" "result.[].system"))
                systemId=${systems[0]}
            fi
            
            # skip the first index in the array in this for loop
            #echo "${!names[@]}" | xargs -P 5 -n 1 -I "%%FILE%%" files-get -v $args
            for i in "${!names[@]}"; do

                # Create, in the local system, the directory to be dowloaded.
                if [ "${formats[i]}" == "folder" ] && [ "${names[i]}" == "." ]; then
                    
                    # TODO - This won't handle correctly (insecure at best) the
                    # case in which one wishes to download the root of the 
                    # remote system, '/'.
                    if [ -z "$filename" ]; then
                        filename=$(basename "$args")
                        if [ -z "$filename" ]; then
                            filename=$(basename "${paths[i]}")
                        fi
                    fi

                    # Create the directory to be downloaded from the remote
                    # system in the local system.
                    if [ -f "$filename" ]; then
                        err "${filename} needs to be a directory (not copied)"
                        exit
                    elif [ -d "$filename" ]; then
                        echo "Directory $filename exists. Skipping mkdir..."
                        targetpath="$filename"
                    else
                        echo "Creating directory $filename..."
                        targetpath="$filename"
                        mkdir "$targetpath"
                    fi

                # If not root directory.
                else
                    # Download directory.
                    if [ "${formats[i]}" == "folder" ]; then
                        files-get -r ${fgrparams} -S $systemId -N $targetpath/${names[i]} $args/${names[i]}
                    # Download file. 
                    else
                        files-get -v ${fgrparams} -S $systemId -N $targetpath/${names[i]} $args/${names[i]}
                    fi
                fi
            done

        else # Listing contents of directory returned an error.
            errorresponse=$(jsonquery "$response" "message")
            err "$errorresponse"
        fi


    else # Not a recursive download - not ((recursive))
        cmd="curl -k -H \"${authheader}\" ${filerange} ${outputarg} '${filesurl}'" 
        if ((veryverbose)); then
            [ "$piped" -eq 0 ] && log "Calling $cmd"
        fi
      fi

      if ((verbose)); then
        [ "$piped" -eq 0 ] && out "Downloading $args ..."
      fi

      output=$(curl -# -k -H "${authheader}" ${filerange} ${outputarg} "${filesurl}" -w "%{http_code} %{filename_effective}")
      http_code=$(echo $output | awk '{print $1}')
      file_name=$(echo $output | awk '{print $2}')

      # The curl command wil redirect all output to the file being created.
      # This will make sure the message is not quietly saved in the file and
      # will remove the file is.
      # HTTP status should be a 200 if download was successful.
      if [ ! -z "$http_code" ] && [ "$http_code" != "200" ]; then 
          cat $file_name && rm $file_name
      fi

      # Curl version < 7.42.0 may return an error upon trying to download an
      # empty file.
      if [ "$?" -eq 0 ] && [ ! -f "$filename" ]; then
        if ((verbose)); then
          echo "Creating empty file $filename..."
        fi
        touch $filename
      else # Print error message if curl command exited with an error code.
        response=$(grep '"status":"error"' $filename)
        if [ -n "$response" ]; then
          err "$response"
        fi
        
        # Download file.
        curl -# -k -H "${authheader}" ${filerange} ${outputarg} "${filesurl}"

        if [ "$?" -eq 0 ] && [ ! -f "$filename" ]; then
            if ((verbose)); then
                echo "Creating empty file $filename..."
            fi
            touch $filename
        else
            response=$(grep '"status":"error"' $filename)
            if [ -n "$response" ]; then
                err "$response"
            fi
        fi
    fi
    
}


format_api_json() {
    names=$(jsonquery "$1" "result.[].name")
    types=$(jsonquery "$1" "result.[].type")
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"

# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -R|--range) shift; range=$1 ;;
    -S|--systemId) shift; systemId=$1 ;;
    -N|--filename) shift; filename=$1 ;;
    -r|--recursive) recursive=1 ;;
    -P|--print) print=1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
