#!/bin/bash
#
# jobs-template
#
# author: opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# It takes an app id as an argument and generates a job submission form.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(access_token apikey)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]...
$(basename $0) [OPTION]... [APP_ID]

Creates a JSON job submission template for the given app id. Additional
options and flags can be used to set defaults and create more verbose
job descriptions.

 Options:
  -z, --access_token    Access token
  -N, --name            Use the provided name for the job
  -E, --empty           Do not insert default values into the jobtemplate
  -A, --allfields       Include all fields in the job template
  -C, --cache           Cache the remote calls for the current system
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/apps-common.sh"

main() {
	#echo -n
	#set -x

  if [ -z "$args" ]; then
    err "Please specify an app on which to base the job template"
	else

    if ((development)); then
      debug_flag='-d'
    fi

    # Pull in the full app description to get the info and references for
    # the job template

    if ((cache)); then
      if [ -z "$(kvget jtapp)" ]; then
        if ((verbose)); then
          [ "$piped" -eq 0 ] && log "Fetching app description for $args"
        fi
        app_description=$(apps-list $debug_flag -v $args)
        kvset jtapp "$app_description"
      else
        app_description=$(kvget jtapp)
        if [[ $(jsonquery "${app_description}" "id") != $args ]]; then
          if ((verbose)); then
            [ "$piped" -eq 0 ] && log "Cached app description was stale. Fetching fresh app description for $args"
          fi
          kvdel jtapp
          kvdel jtexe
          kvdel jtstorage
          app_description=$(apps-list $debug_flag -v $args)
          kvset jtapp "$app_description"
        else
          if ((verbose)); then
            [ "$piped" -eq 0 ] && log "Using cached app description for $args"
          fi
        fi
      fi
    else
      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Fetching app description for $args"
      fi
      kvdel jtapp
      kvdel jtexe
      kvdel jtstorage
      app_description=$(apps-list $debug_flag -v $args)
    fi

    if ((veryverbose)); then
      [ "$piped" -eq 0 ] && log "$app_description"
    fi

    # Fetch the full execution system description so we can use the default
    # queue to fill in any missing default runtime configuration info in the
    # job template.

    app_execution_system_id=$(apps-list $debug_flag -v --filter=executionSystem $args 2>/dev/null)

    execution_system_id=$(jsonquery "$app_execution_system_id" "executionSystem")

    if ((allfields)); then

      if ((cache)); then
        if [ -z "$(kvget jtexe)" ]; then
          if ((verbose)); then
            [ "$piped" -eq 0 ] && log "Fetching system description for execution system $execution_system_id..."
          fi
          execution_system=`echo $(systems-list $debug_flag -v $execution_system_id)`
          kvset jtexe "$execution_system"
        else
          execution_system=$(kvget jtexe)
          if [[ $(jsonquery "${execution_system}" "id") != $execution_system_id ]]; then
            if ((verbose)); then
              [ "$piped" -eq 0 ] && log "Cached execution system description was stale. Fetching system description for execution system $execution_system_id..."
            fi
            kvdel jtexe
            execution_system=$(systems-list $debug_flag -v $execution_system_id)
            kvset jtexe "$execution_system"
          else
            if ((verbose)); then
              [ "$piped" -eq 0 ] && log "Using cached execution system description for $args"
            fi
          fi
        fi
      else
        if ((verbose)); then
          [ "$piped" -eq 0 ] && log "Fetching system description for execution system $execution_system_id..."
        fi
        execution_system=`echo $(systems-list $debug_flag -v $execution_system_id)`
      fi


      # set -x
      queue_names=(`jsonquery "${execution_system}" "queues.[].name"`)
      # set +x
      queue_defaults=(`jsonquery "${execution_system}" "queues.[].default"`)
      queue_memories=(`jsonquery "${execution_system}" "queues.[].maxMemoryPerNode"`)
      queue_ppns=(`jsonquery "${execution_system}" "queues.[].maxProcessorsPerNode"`)


      for i in "${queue_defaults[@]}"; do
        if [ "$i" == 'rue' ] || [ "$i" == "true" ] || [ "$i" == "True" ]; then
          system_default_queue_name="${queue_names[$n]}"
          system_default_queue_ppn="${queue_ppns[$n]}"
          system_default_queue_memory="${queue_memories[$n]}"
          break
        fi
      done

      queue=$(jsonquery "${app_description}" "defaultQueue")
      if [[ -z "$queue" ]] || [[ "$queue" == "null" ]]; then
        queue=$system_default_queue_name
      fi

      memoryPerNode=$(jsonquery "${app_description}" "defaultMemoryPerNode")
      if [[ -z "$memoryPerNode" ]] || [[ "$memoryPerNode" == "null" ]]; then
        memoryPerNode=$system_default_queue_memory
      fi

      nodeCount=$(jsonquery "${app_description}" "defaultNodeCount")
      if [[ -z "$nodeCount" ]] || [[ "$nodeCount" == "null" ]]; then
        nodeCount=1
      fi

      processorsPerNode=$(jsonquery "${app_description}" "defaultProcessorsPerNode")
      if [[ -z "$processorsPerNode" ]] || [[ "$processorsPerNode" == "null" ]]; then
        processorsPerNode=${system_default_queue_ppn}
      fi

      maxRunTime=$(jsonquery "${app_description}" "defaultMaxRunTime")
      if [[ -z "$maxRunTime" ]] || [[ "$maxRunTime" == "null" ]]; then
        maxRunTime="01:00:00"
      fi
    fi

    # Configure the archive info. By default we turn archiving on. For full
    # job templates we add the user's default storage system as their archive
    # system and set the path to null to force Agave to generate a default path.
    archive="true"

    if ((allfields)); then
      # Look up the user's default storage system to fill out the archive info
      if ((cache)); then
        if [ -z "$(kvget jtstorage)" ]; then
          if ((verbose)); then
            [ "$piped" -eq 0 ] && log "Fetching default storage system description..."
          fi
          default_system=$(systems-list $debug_flag -D -S -v )
          kvset jtstorage "$default_system"
        else
          default_system=$(kvget jtstorage)
          if [[ -z $(jsonquery "$default_system" "[].id") ]]; then
            if ((verbose)); then
              [ "$piped" -eq 0 ] && log "Cached storage system description was stale. Fetching fresh default storage system description..."
            fi
            kvdel jtstorage
            default_system=$(systems-list $debug_flag -D -S -v )
            kvset jtstorage "$default_system"
          else
            if ((verbose)); then
              [ "$piped" -eq 0 ] && log "Using cached default storage system description..."
            fi
          fi
        fi
      else
        if ((verbose)); then
          [ "$piped" -eq 0 ] && log "Fetching default storage system description..."
        fi
        default_system=$(systems-list $debug_flag -D -S -v )
      fi

      archivePath="null"
      archiveSystem=$(jsonquery "$default_system" "[].id")
    fi

    # Create the inputs object. Hidden inputs are not included. Optional
    # inputs are only included when the full template is requested. If a
    # default value is given in the app description it is used, otherwise, a
    # null value is used.
    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Parsing app inputs..."
    fi
    input_ids=(`jsonquery "$app_description" "inputs.[].id"`)
    input_defaults=(`jsonquery "$app_description" "inputs.[].value.default"`)
    input_requireds=(`jsonquery "$app_description" "inputs.[].value.required"`)
    input_visibles=(`jsonquery "$app_description" "inputs.[].value.visible"`)
    input_min_cardinality=(`jsonquery "$app_description" "inputs.[].semantics.minCardinality"`)
    input_max_cardinality=(`jsonquery "$app_description" "inputs.[].semantics.maxCardinality"`)
    input_count=${#input_ids[@]}


    n=0
    for i in "${input_ids[@]}"; do

      # figure out fencepost comma problem
      if [[ "$input_count" -eq "$[n+1]" ]]; then
        trailingcomma=''
      else
        trailingcomma=','
      fi

      if [[ "${input_visibles[$n]}" == "rue" ]] || [[ "${input_visibles[$n]}" == "true" ]]; then
        if [[ "${input_requireds[$n]}" == "rue" ]] || [[ "${input_requireds[$n]}" == "true" ]] || [[ "$allfields" == 1 ]]; then
          if [[ "${input_defaults[$n]}" == "null" ]]; then
            tmpDefaults=( $(generateDefaults "input" ${input_min_cardinality[$n]} ${input_max_cardinality[$n]}) )
            tmpDefaultsCount=${#tmpDefaults[@]}
          elif [[ "${input_max_cardinality[$n]}" -ne 1 ]]; then
            tmpDefaults=( $(echo ${input_defaults[$n]} | sed 's/\[//g' | sed 's/\]//g' | sed 's/,/ /g') )
            tmpDefaultsCount=${#tmpDefaults[@]}
          fi

          if [[ "${input_max_cardinality[$n]}" -ne 1 ]]; then

            inputs=$(printf "%s\n    \"%s\": [ " "$inputs" "$i")

            zz=0
            for z in "${tmpDefaults[@]}"; do
              tc=','
              if [[ "$tmpDefaultsCount" -eq "$[zz+1]" ]]; then
                tc=''
              fi
              if [[ "$z" != "null" ]]; then
                inputs=$(printf "%s\n      \"%s\"%s" "$inputs" "$z" "$tc")
              fi
              zz=$[zz+1]
            done

            inputs=$(printf "%s\n    ]%s" "$inputs" "$trailingcomma")
          else
            if [[ "${input_defaults[$n]}" != "null" ]]; then
              inputs=$(printf "%s\n    \"%s\": \"%s\"%s" "$inputs" "$i" "${input_defaults[$n]}" "$trailingcomma")
            fi
          fi
        fi
      fi

      n=$[n+1]

    done

    # Create the parameters object. Hidden parameters are not included. Optional
    # parameters are only included when the full template is requested. If a
    # default value is given in the app description it is used, otherwise, an
    # appropriate value for the parameter's type is used.
    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Parsing app parameters..."
    fi
    parameter_ids=(`jsonquery "$app_description" "parameters.[].id"`)
    parameter_defaults=(`jsonquery "$app_description" "parameters.[].value.default"`)
    parameter_requireds=(`jsonquery "$app_description" "parameters.[].value.required"`)
    parameter_visibles=(`jsonquery "$app_description" "parameters.[].value.visible"`)
    parameter_types=(`jsonquery "$app_description" "parameters.[].value.type"`)
    parameter_min_cardinality=(`jsonquery "${app_description}" "parameters.[].semantics.minCardinality"`)
    parameter_max_cardinality=(`jsonquery "${app_description}" "parameters.[].semantics.maxCardinality"`)
    #parameter_enum_values=(`jsonquery "${app_description}" "parameters.[].value.enum_values"`)
    parameter_count=${#parameter_ids[@]}

    n=0
    for i in "${parameter_ids[@]}"; do

      # figure out fencepost comma problem
      if [[ "$parameter_count" -eq "$[n+1]" ]]; then
        trailingcomma=''
      else
        trailingcomma=','
      fi

      if [[ "${parameter_visibles[$n]}" == "rue" ]] || [[ "${parameter_visibles[$n]}" == "true" ]]; then
        if [[ "${parameter_requireds[$n]}" == "rue" ]] || [[ "${parameter_requireds[$n]}" == "true" ]] || [[ "$allfields" == 1 ]]; then
          if [[ "${parameter_defaults[$n]}" == "null" ]]; then


            # strip the array of objects to a list of strings
            tmpEnums=''
            if [[ "${parameter_types[$n]}" == 'enumeration' ]]; then
              tmpEnums=$(jsonquery "${app_description}" "parameters.$n.value.enum_values")
              tmpEnums=( $(echo "$tmpEnums" | sed 's/:\([a-zA-Z0-9 \-_]*\)}/}/g' | sed 's/\]//g' | sed 's/\[//g' | sed 's/}/"/g' | sed 's/{/"/g' | sed 's/,/ /g' ) )
            fi

            tmp_min_cardinality="${parameter_min_cardinality[$n]}"
            if [[ -z "$tmp_min_cardinality" ]]; then
              tmp_min_cardinality=1
            fi

            tmp_max_cardinality="${parameter_max_cardinality[$n]}"
            if [[ -z "$tmp_max_cardinality" ]]; then
              tmp_max_cardinality=1
            fi

            tmpDefaults=($(generateDefaults "${parameter_types[$n]}" $tmp_min_cardinality $tmp_max_cardinality "${tmpEnums[@]}"))


            if [[ -n "$tmp_max_cardinality" ]] && [[ "$tmp_max_cardinality" -ne 1 ]] && [[ "${parameter_types[$n]}" != "bool" ]] && [[ "${parameter_types[$n]}" != "flag" ]]; then
              tmpDefaultsCount=${#tmpDefaults[@]}

              parameters=$(printf "%s\n    \"%s\": [ " "$parameters" "$i")

              zz=0
              for z in "${tmpDefaults[@]}"; do
                tc=','
                if [[ "$tmpDefaultsCount" -eq "$[zz+1]" ]]; then
                  tc=''
                fi
                if [[ "${parameter_types[$n]}" == "string" ]];then
                  parameters=$(printf "%s\n      \"%s\"%s" "$parameters" "$z" "$tc")
                elif [[ "${parameter_types[$n]}" == "enumeration" ]]; then
                  parameters=$(printf "%s\n      %s%s" "$parameters" "$z" "$tc")
                else
                  parameters=$(printf "%s\n      %s%s" "$parameters" "$z" "$tc")
                fi
                zz=$[zz+1]
              done

              parameters=$(printf "%s\n    ]%s" "$parameters" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "string" ]]; then
              parameters=$(printf "%s\n    \"%s\": \"%s\"%s" "$parameters" "$i" "$tmpDefaults" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "enumeration" ]]; then
              tmpEnum=$(echo "$tmpDefaults" | sed 's///g')
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "$tmpDefaults" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "bool" ]] || [[ "${parameter_types[$n]}" == "flag" ]]; then
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "true" "$trailingcomma")
            else
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "$tmpDefaults" "$trailingcomma")
            fi

            # if [[ "${parameter_types[$n]}" == "string" ]]; then
            #   parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "$tmpDefaults" "$trailingcomma")
            # elif [[ "${parameter_types[$n]}" == "bool" ]] || [[ "${parameter_types[$n]}" == "flag" ]]; then
            #   parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "true" "$trailingcomma")
            # elif [[ "${parameter_types[$n]}" == "number" ]]; then
            #
            #   if [[ "${parameter_min_cardinality[$n]}" -gt 1 ]]; then
            #     parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "[1234567890]" "$trailingcomma")
            #   else
            #     parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "1234567890" "$trailingcomma")
            #   fi
            # else
            #   if [[ "${parameter_min_cardinality[$n]}" -gt 1 ]]; then
            #     parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "null" "$trailingcomma")
            #   else
            #     parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "null" "$trailingcomma")
            #   fi
            # fi
          else

            if [[ -n "${parameter_max_cardinality[$n]}" ]] && [[ "${parameter_max_cardinality[$n]}" -ne 1 ]]; then
              tmpEnums=''
              if [[ -n "${parameter_enum_values[$n]}" ]]; then
                tmpDefaults=( $(echo ${parameter_enum_values[$n]} | sed 's/:\([a-zA-Z0-9 \-_]*\)}/}/g' | sed 's/\]//g' | sed 's/\[//g' | sed 's/}/"/g' | sed 's/{/"/g' | sed 's/,/ /g' ) )
              else
                tmpDefaults=( $(echo ${parameter_defaults[$n]} | sed 's/\[//g' | sed 's/\]//g' | sed 's/,/ /g') )
              fi
              tmpDefaultsCount=${#tmpDefaults[@]}

              parameters=$(printf "%s\n    \"%s\": [ " "$parameters" "$i")

              zz=0
              for z in "${tmpDefaults[@]}"; do
                tc=','
                if [[ "$tmpDefaultsCount" -eq "$[zz+1]" ]]; then
                  tc=''
                fi
                if [[ "${parameter_types[$n]}" == "string" ]]; then
                  parameters=$(printf "%s\n      \"%s\"%s" "$parameters" "$z" "$tc")
                elif [[ "${parameter_types[$n]}" == "enumeration" ]]; then
                  tmpEnum=$(echo "$z" | sed 's/"//g')
                  parameters=$(printf "%s\n      \"%s\"%s" "$parameters" "$tmpEnum" "$tc")
                else
                  parameters=$(printf "%s\n      %s%s" "$parameters" "$z" "$tc")
                fi
                zz=$[zz+1]
              done

              parameters=$(printf "%s\n    ]%s" "$parameters" "$trailingcomma")

            elif [[ "${parameter_types[$n]}" == "string" ]] || [[ "${parameter_types[$n]}" == "enumeration" ]]; then
              parameters=$(printf "%s\n    \"%s\": \"%s\"%s" "$parameters" "$i" "${parameter_defaults[$n]}" "$trailingcomma")
            elif [[ "${parameter_types[$n]}" == "bool" ]] || [[ "${parameter_types[$n]}" == "flag" ]]; then
              if [[ "${parameter_defaults[$n]}" == 'false' ]]; then
                parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "false" "$trailingcomma")
              else
                parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "true" "$trailingcomma")
              fi
            else
              parameters=$(printf "%s\n    \"%s\": %s%s" "$parameters" "$i" "${parameter_defaults[$n]}" "$trailingcomma")
            fi
          fi
        fi
      fi

      n=$[n+1]

    done

    # Create the notifications array when full templates are requested. This will
    # add two notifications to the job. One for FINISHED and one for FAILED. The
    # user's email address is looked up and used as the callback address.
    if ((allfields)); then
      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Fetching your profile description..."
      fi
      profiles_description=$(profiles-list $debug_flag -v me 2>/dev/null)
      if [[ -z "$profiles_description" ]]; then
	       EMPTY_PROFILE=1
      else
        user_email=$(jsonquery "$profiles_description" "email")
      fi

      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Creating a new webhook url for your job..."
      fi
      equestbin=$(requestbin-create -v)
      requestbin_id=$(jsonquery "$requestbin" "name")
      webhookurl="https://requestbin.agaveapi.co/${requestbin_id}?job_id=\${JOB_ID}&status=\${JOB_STATUS}"

      if ((verbose)); then
        [ "$piped" -eq 0 ] && log "Creating notifications..."
      fi

      if ((EMPTY_PROFILE)); then
        notifications=$(printf "    {\n      \"url\":\"%s\",\n      \"event\":\"*\",\n      \"persistent\":true\n    }" "$webhookurl")
      else
        notifications=$(printf "    {\n      \"url\":\"%s\",\n      \"event\":\"*\",\n      \"persistent\":true\n    },\n    {\n      \"url\":\"%s\",\n      \"event\":\"FINISHED\",\n          \"persistent\":false\n    },\n    {\n      \"url\":\"%s\",\n      \"event\":\"FAILED\",\n      \"persistent\":false\n    }" "$webhookurl" "$user_email" "$user_email")
      fi
    fi

    # Allow the user to pass in a job name by default. Otherwise, generate one
    # derived from the job id
    if [[ -z "$name" ]]; then
      timestamp=$(date +%s)
      job_name="$(jsonquery "$app_description" "name") test-$timestamp"
    fi

    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "Building job template..."
    fi

    if ((allfields)); then
      printf "{\n  \"name\":\"%s\",\n  \"appId\": \"%s\",\n  \"batchQueue\": \"%s\",\n  \"executionSystem\": \"%s\",\n  \"maxRunTime\": \"%s\",\n  \"memoryPerNode\": \"%sGB\",\n  \"nodeCount\": %s,\n  \"processorsPerNode\": %s,\n  \"archive\": %s,\n  \"archiveSystem\": \"%s\",\n  \"archivePath\": %s,\n  \"inputs\": {%s\n  },\n  \"parameters\": {%s\n  },\n  \"notifications\": [\n%s\n  ]\n}\n" "$job_name" "$args" "$queue" "$execution_system_id" "$maxRunTime" "$memoryPerNode" "$nodeCount" "$processorsPerNode" "$archive" "$archiveSystem" "$archivePath" "$inputs" "$parameters" "$notifications"
    else
      printf "{\n  \"name\": \"%s\",\n  \"appId\": \"%s\",\n  \"archive\": %s,\n  \"inputs\": {%s\n  },\n  \"parameters\": {%s\n  }\n}\n" "$job_name" "$args" "$archive" "$inputs" "$parameters"
    fi

    if ((verbose)); then
      [ "$piped" -eq 0 ] && log "All done!!"
    fi

  fi
}

function generateDefaults {

  default_values=''
  tmp_val=''

  asdfasdfasd="$1 $2 $3 $4"
  # $1 target value type
  value_type=$1
  shift;

  # $2 minCardinality
  min_card=$1
  if [[ -z "$min_card" ]]; then
    min_card=1
  fi
  shift;

  # $3 maxCardinality
  if [[ -z "$1" ]]; then
    max_card=1
  elif [[ "$1" -eq -1 ]]; then
    max_card=5
  else
    max_card=$1
  fi
  shift;

  # $4 enumValues
  if [[ -z "$1" ]]; then
    enum_values=("")
  else
    enum_values=("$@")

  fi
  enum_count="${#enum_values[@]}"

  if [[ "$value_type" == "bool" ]] || [[ "$value_type" == "flag" ]]; then

    echo "true"

  else
    # if they want all fields to show, we'll populate it up to the max number of values
    if ((allfields)); then
      value_range=$(eval echo {$min_card..$max_card})
    # otherwise, we'll use the min
    else
      value_range=$(eval echo {$0..$min_card})
    fi

    for i in $value_range; do
      tmp_val=''
      if [[ "$value_type" == "integer" ]]; then
        tmp_val=$(( ( RANDOM % 100000 )  + 1 ))
      elif [[ "$value_type" == "decimal" ]]; then
        tmp_int=$(( ( RANDOM % 10000 )  + 1 ))
        tmp_dec=$(( ( RANDOM % 1000 )  + 1 ))
        tmp_val=$tmp_int.$tmp_dec
      elif [[ "$value_type" == "number" ]]; then
        tmp_val=$(( ( RANDOM % 100000 )  + 1 ))
      elif [[ "$value_type" == "input" ]]; then
        seed=$(( ( RANDOM % 2 ) + 1 ))
        # get a random agave url for the user
        tmp_fname=`head -c 10 /dev/urandom | base64`
        tmp_fname=${tmp_fname%\/}
        if [[ "$seed" -eq 1 ]]; then
          # get a random meme url from imgur
          tmp_val="http://lorempixel.com/640/480/sports/?key=${tmp_fname:0:12}"
        elif [[ "$seed" -eq 2 ]]; then
          tmp_val="agave://${archiveSystem}/${username}/inputs/${tmp_fname:0:12}.dat"
        else
          tmp_val="${username}/inputs/${tmp_fname:0:12}.dat"
        fi
      elif [[ "$value_type" == "enumeration" ]]; then
        enumindex=$(( ( RANDOM % $enum_count ) ))
        tmp_val=${enum_values[$enumindex]}
      else
        tmp_val=`head -c 10 /dev/urandom | base64`
        tmp_val=${tmp_val%\/}
        tmp_val="${tmp_val:0:7}"
      fi

      default_values="$tmp_val $default_values"
    done

    if [[ "$max_card" -eq 1 ]]; then
      echo ${default_values% }
    else
      echo $default_values
    fi
  fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
#[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -N|--name) shift; name=$1 ;;
    -E|--empty) shift; empty=$1 ;;
    -A|--allfields) allfields=1 ;;
    -C|--cache) cache=1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
