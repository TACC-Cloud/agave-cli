#!/bin/bash
#
# files-import
#
# author: opensource@tacc.cloud
#
# This script is part of the Agave API command line interface (CLI).
# Import a file given by a remote url into a registered system.
#

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$DIR/common.sh"

# Script logic -- TOUCH THIS {{{

# A list of all variables to prompt in interactive mode. These variables HAVE
# to be named exactly as the longname option definition in usage().
interactive_opts=(apisecret apikey urltoingest)

# Print usage
usage() {
  echo -n "$(basename $0) [OPTION]... [PATH]

Imports a remote URI to a remote storage system. The subsequent staging will be
done via a proxy between the native data protocol of the remote system and the URL.
When possible, 3rd party transfer will take place. If the given file type requires
import filtering, it will be applied prior to the callback being sent. If no
system id is specified, the user's default storage system will be used. This action
is non-blocking.

 Options:
  -z, --access_token    Access token
  -U, --urltoingest     The url to be imported
  -W, --webhook         The email address or webhook to notify upon completion
                        of all import filtering
  -T, --filetype        The filetype associated with this file. See transforms-list
                        for a full list of supported file types. Defaults to 'raw'
  -N, --filename        The name of the file once uploaded
  -S, --systemid        The system to which the file or folder will be uploaded
      --filter          Comma separated list of fields to return in the response
  -H, --hosturl         URL of the service
  -d, --development     Run in dev mode using default dev server
  -f, --force           Skip all user interaction
  -i, --interactive     Prompt for values
  -q, --quiet           Quiet (no output)
  -v, --verbose         Verbose output
  -V, --veryverbose     Very verbose output
  -h, --help            Display this help and exit
      --version         Output version information and exit
"
}

##################################################################
##################################################################
#						Begin Script Logic						 #
##################################################################
##################################################################

source "$DIR/files-common.sh"

main() {
	#echo -n
	#set -x

	local post_options='';

  webhook_post_options=''
	if [ -n "$webhook" ]; then
    webhook=$(echo "$webhook" | sed 's/\&/%26/g' )
    webhook_post_options="--data-urlencode 'notifications=${webhook}'"
	fi

  filetype_post_options=''
	if [ -n "$filetype" ]; then
		filetype_post_options="--data-urlencode 'fileType=${filetype}'"
	fi

  filename_post_options=''
	if [ -n "$filename" ]; then
		filename_post_options=$"--data-urlencode "fileName=${filename}""
	fi

	if [ -n "$systemid" ]; then
		hosturl="${hosturl}media/system/${systemid}/"
	else
		hosturl="${hosturl}media/"
	fi

	cmd="curl -sk -H \"${authheader}\" -X POST --data-urlencode \"urlToIngest=${urltoingest}\" --data-urlencode \"notifications=${webhook}\" --data-urlencode \"fileType=${filetype}\" --data-urlencode \"fileName=${filename}\" '$hosturl$args?pretty=true'"

  if ((veryverbose)); then
      [ "$piped" -eq 0 ] && log "Calling $cmd"
  fi

  response=`curl -sk -H "${authheader}" -X POST --data-urlencode "urlToIngest=${urltoingest}" --data-urlencode "notifications=${webhook}" --data-urlencode "fileName=${filename}" --data-urlencode "fileType=${filetype}" --data-urlencode "fileName=${filename}" "$hosturl$args?pretty=true"`

	if [[ $(jsonquery "$response" "status") = 'success' ]]; then
		result=$(format_api_json "$response")
		success "$result"
	else
		errorresponse=$(jsonquery "$response" "message")
		err "$errorresponse"
	fi
}

format_api_json() {

	if ((veryverbose)); then
		echo "$1"
	elif [[ $verbose -eq 1 ]]; then
		result=$(jsonquery "$1" "result" 1)
		json_prettyify "${result}"
	else
		echo "Successfully submitted ${urltoingest} for import"
	fi
}

##################################################################
##################################################################
#						End Script Logic						 #
##################################################################
##################################################################

# }}}

# Parse command line options
source "$DIR/options.sh"


# Main loop {{{

# Print help if no arguments were passed.
[[ $# -eq 0 ]] && set -- "-i"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; safe_exit ;;
    --version) version; copyright; disclaimer; safe_exit ;;
    -z|--access_token) shift; access_token=$1 ;;
    -U|--urltoingest) shift; urltoingest=$1 ;;
    -W|--webhook) shift; webhook=$1 ;;
    -T|--filetype) shift; filetype=$1 ;;
    -N|--filename) shift; filename=$1 ;;
    -S|--systemid) shift; systemid=$1 ;;
    --filter) shift; responsefilter=$1 ;;
    -H|--hosturl) shift; hosturl=$1;;
  	-d|--development) development=1 ;;
    -v|--verbose) verbose=1 ;;
    -V|--veryverbose) veryverbose=1; verbose=1 ;;
    -q|--quiet) quiet=1 ;;
    -i|--interactive) interactive=1 ;;
    -f|--force) force=1 ;;
    --endopts) shift; break ;;
    *) die "invalid option: $1" ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# }}}

# Run the script logic
source "$DIR/runner.sh"
