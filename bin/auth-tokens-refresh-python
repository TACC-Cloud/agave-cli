#!/usr/bin/env python
"""
    auth-tokens-refresh [OPTION]

Exchanges a Tapis Oauth client refresh token for a new access and refresh token.

 Options:
    -z, --access_token   Access token to be refreshed.
    -r, --refresh_token  Current refresh token.
    -k, --apikey         Oauth client key.
    -s, --apisecret      Oauth client secret.
    -D, --displayonly    Display but do not store the access token.
    -q, --quiet          Quiet (no output save for errors)
    -c, --cachedir       Session cache directory.
"""
from __future__ import print_function
import argparse
import json
import os
import sys
from agavepy.agave import Agave
from agavepy import tokens, utils

REFRESHING_TOKEN_MSG = 'Refreshing access token...'
SELECT_TENANT_ID_MSG = 'Select a valid tenant id.'
TOKEN_OPERATION_FAILED = 'Token issuance failed: {0}'
TOKEN_NOT_STORED_MSG = 'Token was not stored in session cache.'

parser = argparse.ArgumentParser(
    description="Exchanges a Tapis Oauth client refresh token for a new access and refresh token.")

parser.add_argument("-f", "--force", dest="force",
                    action="store_true",
                    help="Force refresh even if token has not expired.")
parser.add_argument("-t", "--tenant", default=None,
                    help="Tenant id for session.")
parser.add_argument("-u", "--username", default=None,
                    help="Username.")
parser.add_argument("-z", "--access_token", dest="access_token",
                    default=None,
                    help="Access token to be refreshed.")
parser.add_argument("-r", "--refresh_token", dest="refresh_token",
                    default=None,
                    help="Current refresh token.")
parser.add_argument("-k", "--apikey", default=None,
                    help="Oauth client key.")
parser.add_argument("-s", "--apisecret", default=None,
                    help="Oauth client secret.")
parser.add_argument("-D", "--displayonly", dest="displayonly",
                    action="store_true",
                    help="Display but do not store the access token.")
parser.add_argument("-S", "--storetoken", dest="storetoken",
                    action="store_true",
                    help="Store tokens for later use (default).")
parser.add_argument("-q", "--quiet", dest="quiet",
                    action="store_true",
                    help="Quiet (no output).")
parser.add_argument(
    "-c",
    "--cachedir",
    default=utils.credentials_cache_dir(),
    help="Session cache directory.")
parser.add_argument(
    "--tenants",
    default=utils.tenants_url(),
    help="URL with tenant listing.")


if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = args.username
    api_key = args.apikey
    api_secret = args.apisecret
    access_token = args.access_token
    refresh_token = args.refresh_token
    display_only = args.displayonly
    force = args.force
    new_token = None
    quiet = args.quiet

    try:
        context = dict()
        # try:
        # Pick up existing client_name in context if it is configured
        context = utils.bootstrap_context(
            cache_dir, tenantid=tenant_id,
            username=username,
            client_name=None,
            apikey=api_key,
            apisecret=api_secret,
            access_token=access_token,
            refresh_token=refresh_token,
            expires_at=None,
            expires_in=None,
            created_at=None)
        config_file = utils.sessions_cache_path(cache_dir)
        # config = json.load(open(config_file, 'rb'))
        # except (FileNotFoundError):
        #     print('A session cache file was not found in {}. You may be running in an environment that does not support multiple sessions, or you may simply need to run "auth-session-init" to create additional sessions.'.format(utils.credentials_cache_dir(cache_dir)))
        #     sys.exit(1)
        # except (IOError, OSError):
        #     print('It was not possible to read the session cache file.')
        #     sys.exit(1)
        # except json.decoder.JSONDecodeError:
        #     print('The session cache was corrupted or misformatted.')
        #     sys.exit(1)

        # Init an Agave client from the CLI options alone
        if context['apikey'] is not None \
                and context['apisecret'] is not None and context['refresh_token'] is not None and context['tenantid'] is not None:
            # utils.print_stderr('Instantiating Oauth client from options')
            agave.username = utils.prompt_username(context['username'])

            agave.api_key = context['apikey']
            agave.client_name = context['client_name']
            agave.api_secret = context['apisecret']
            agave.token = context['access_token']
            agave.refresh_token = context['refresh_token']
            agave.created_at = context['created_at']
            agave.expires_in = context['expires_in']
            agave.expires_at = context['expires_at']

            if context['tenantid'] is not None:
                agave.tenant_id = context['tenantid']
            try:
                agave.init(args.tenants)
            except KeyError:
                utils.print_stderr(SELECT_TENANT_ID_MSG)
                agave.list_tenants()
                sys.exit(1)

            # Don't cache tokens if the client was configured purely from args
            if access_token is not None and tenant_id is not None \
                    and api_key is not None and api_secret is not None and refresh_token is not None:
                display_only = True

            if not quiet:
                utils.print_stderr(REFRESHING_TOKEN_MSG)
            agave.refresh_tokens(force=force)

            # tok = tokens.refresh_token(
            #     context['apikey'], context['apisecret'],
            #     context['refresh_token'], agave.api_server)

            # agave.token = tok['access_token']
            # agave.expires_at = tok['expires_at']
            # agave.refresh_token = tok['refresh_token']

            new_token = agave.token
            token_expires = agave.expires_at

        else:
            # utils.print_stderr('Loading current Oauth client configuration')
            config_file = utils.sessions_cache_path(cache_dir)
            # Check if there may be a session already saved.
            if os.path.exists(config_file):
                try:
                    agave.load_configs(
                        cache_dir=cache_dir)
                except KeyError:
                    raise

            if not quiet:
                utils.print_stderr(REFRESHING_TOKEN_MSG)

            agave.refresh_tokens(force=force)
            new_token = agave.token
            token_expires = agave.expires_at

        if not quiet:
            print(new_token)
            utils.print_stderr('New token expires: {}'.format(token_expires))

        # Save session.
        if not display_only:
            agave.save_configs(cache_dir)
        else:
            if not quiet:
                utils.print_stderr(TOKEN_NOT_STORED_MSG)

        sys.exit(0)

    except Exception as err:
        utils.print_stderr(TOKEN_OPERATION_FAILED.format(err))
        sys.exit(1)
